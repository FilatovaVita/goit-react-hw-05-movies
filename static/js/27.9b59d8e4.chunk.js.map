{"version":3,"file":"static/js/27.9b59d8e4.chunk.js","mappings":"uSACaA,EAAcC,EAAAA,GAAAA,IAAH,kNASXC,EAAaD,EAAAA,GAAAA,IAAH,uG,mBCFR,SAASE,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,2FACdN,GAAW,GADG,mBAGWO,EAAAA,EAAAA,IAAaJ,GAHxB,OAGNK,EAHM,OAIZV,EAAQU,GAJI,uDAMZN,EAAS,EAAD,IANI,kBAOLO,EAAAA,GAAAA,MAAY,2CAPP,yBASZT,GAAW,GATC,4EAAH,qDAYbM,GACD,GAAE,CAACH,KAGF,2BACGJ,IAAW,SAACW,EAAA,EAAD,IACXb,EAAKc,QACJ,SAACnB,EAAD,WACIS,GACAJ,EAAKe,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAAcC,EAAlC,EAAkCA,GAAlC,OACP,0BACGD,GACC,SAACrB,EAAD,CACEuB,IAAG,yCAAoCF,GACvCG,IAAKL,EACLd,QAAQ,UAGV,SAACL,EAAD,CAAYuB,IAAKE,EAAUD,IAAKL,KAElC,4BACE,uBAAIA,KACJ,0BACE,uCADF,IACsBC,UAbjBE,EADF,OAqBb,sCAIP,C,2NC3DKI,EAAM,mCACZC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAiB,mCAAG,sGACRD,EAAAA,EAAAA,IAAU,sBAAuB,CACtDE,OAAQ,CACNC,QAASJ,KAHkB,uBACvBK,EADuB,EACvBA,KADuB,kBAOxBA,EAAKC,SAPmB,2CAAH,qDAUjBC,EAAe,mCAAG,WAAMC,GAAN,0FACNP,EAAAA,EAAAA,GAAM,gBAAiB,CAC5CE,OAAQ,CACNC,QAASJ,EACTS,eAAe,EAChBD,MAAAA,KAL0B,uBACrBH,EADqB,EACrBA,KADqB,kBAStBA,EAAKC,SATiB,2CAAH,sDAWfI,EAAe,mCAAG,WAAM3B,GAAN,0FACNkB,EAAAA,EAAAA,GAAM,UAAD,OAAWlB,GAAW,CAChDoB,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,GAPsB,2CAAH,sDAUflB,EAAY,mCAAG,WAAMJ,GAAN,0FACHkB,EAAAA,EAAAA,GAAM,UAAD,OAAWlB,EAAX,YAA8B,CACxDoB,OAAQ,CACNC,QAASJ,KAHa,uBAClBK,EADkB,EAClBA,KADkB,kBAOnBA,EAAK5B,MAPc,2CAAH,sDAUZkC,EAAe,mCAAG,WAAM5B,GAAN,0FACNkB,EAAAA,EAAAA,GAAM,UAAD,OAAWlB,EAAX,YAA8B,CACxDoB,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,EAAKC,SAPiB,2CAAH,sDAUfM,EAAe,mCAAG,WAAM7B,GAAN,0FACNkB,EAAAA,EAAAA,GAAM,UAAD,OAAWlB,EAAX,WAA6B,CACvDoB,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,EAAKC,SAPiB,2CAAH,qD","sources":["components/MovieCast/MovieCast.styled.jsx","components/MovieCast/MovieCast.js","utils/api.js"],"sourcesContent":["import styled from 'styled-components';\nexport const CastGallery = styled.div`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  gap: 10px;\n  margin: 0 auto;\n  padding: 0;\n  list-style: none;\n`\nexport const CastPoster = styled.img`\n  width: 300px;\n  height: 360px;\n  border-radius: 15px;\n  object-fit: cover;`\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from '../../utils/api';\nimport { Loader } from '../Loader/Loader';\nimport noPoster from '../../images/noPoster.jpg';\nimport { CastGallery, CastPoster } from './MovieCast.styled';\nimport toast from 'react-hot-toast';\n\nexport default function MovieCast() {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCast = async () => {\n      setLoading(true);\n      try {\n        const response = await getMovieCast(movieId);\n        setCast(response);\n      } catch (error) {\n        setError(error);\n        return toast.error('Something went wrong..reload the page!');\n      } finally {\n        setLoading(false);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Loader />}\n      {cast.length ? (\n        <CastGallery>\n          {!error &&\n            cast.map(({ name, character, profile_path, id }) => (\n              <li key={id}>\n                {profile_path ? (\n                  <CastPoster\n                    src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n                    alt={name}\n                    loading=\"lazy\"\n                  />\n                ) : (\n                  <CastPoster src={noPoster} alt={name} />\n                )}\n                <div>\n                  <p>{name}</p>\n                  <p>\n                    <b>Character: </b> {character}\n                  </p>\n                </div>\n              </li>\n            ))}\n        </CastGallery>\n      ) : (\n        <b>NO CAST </b>\n      )}\n    </div>\n  );\n}\n","import axios from 'axios';\n\nconst KEY = 'c38fbf9ef4d95318ebd4d81243883dff';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getSearchMovies = async query => {\n  const { data } = await axios('/search/movie', {\n    params: {\n      api_key: KEY,\n      include_adult: false,\n     query\n    },\n  });\n\n  return data.results;\n};\nexport const getMovieDetails = async movieId => {\n  const { data } = await axios(`/movie/${movieId}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return data;\n};\n\nexport const getMovieCast = async movieId => {\n  const { data } = await axios(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios(`/movie/${movieId}/reviews`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getMovieTrailer = async movieId => {\n  const { data } = await axios(`/movie/${movieId}/videos`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return data.results;\n};\n\n"],"names":["CastGallery","styled","CastPoster","MovieCast","useState","cast","setCast","loading","setLoading","error","setError","movieId","useParams","useEffect","getCast","getMovieCast","response","toast","Loader","length","map","name","character","profile_path","id","src","alt","noPoster","KEY","axios","getTrendingMovies","params","api_key","data","results","getSearchMovies","query","include_adult","getMovieDetails","getMovieReviews","getMovieTrailer"],"sourceRoot":""}