{"version":3,"file":"static/js/27.a3d4408b.chunk.js","mappings":"6LACaA,EAAS,WACpB,OACE,SAAC,KAAD,CACEC,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,0BACVC,aAAc,CAACC,SAAU,QACvBC,IAAK,MACLC,KAAM,MACNC,UAAW,yBACbC,aAAa,0BACbC,WAAa,UACbC,MAAQ,UAGb,C,wLChBYC,EAAcC,EAAAA,GAAAA,IAAH,kNASXC,EAAaD,EAAAA,GAAAA,IAAH,uG,mBCCR,SAASE,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAO,mCAAG,2FACdN,GAAW,GADG,mBAGWO,EAAAA,EAAAA,IAAaJ,GAHxB,OAGNK,EAHM,OAIZV,EAAQU,GAJI,uDAMZN,EAAS,EAAD,IANI,kBAOLO,EAAAA,GAAAA,MAAY,2CAPP,yBASZT,GAAW,GATC,4EAAH,qDAYbM,GACD,GAAE,CAACH,KAGF,2BACGJ,IAAW,SAACpB,EAAA,EAAD,IACXkB,EAAKa,QACJ,SAAClB,EAAD,WACIS,GAASJ,EAAKc,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,aAAcC,EAAlC,EAAkCA,GAAlC,OAClB,0BACGD,GACD,SAACpB,EAAD,CACEsB,IAAG,yCAAoCF,GACvCG,IAAKL,EACLb,QAAQ,UACH,SAACL,EAAD,CAAYsB,IAAKE,EAAUD,IAAKL,KACvC,4BACE,uBAAIA,KACJ,0BACE,uCADF,IACsBC,UAVjBE,EADS,OAkBtB,sCAIP,C,mMC1DKI,EAAM,mCACZC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAiB,mCAAG,sGACRD,EAAAA,EAAAA,IAAU,sBAAuB,CACtDE,OAAQ,CACNC,QAASJ,KAHkB,uBACvBK,EADuB,EACvBA,KADuB,kBAOxBA,EAAKC,SAPmB,2CAAH,qDAUjBC,EAAe,mCAAG,WAAMC,GAAN,0FACNP,EAAAA,EAAAA,GAAM,gBAAiB,CAC5CE,OAAQ,CACNC,QAASJ,EACTS,eAAe,EAChBD,MAAAA,KAL0B,uBACrBH,EADqB,EACrBA,KADqB,kBAStBA,EAAKC,SATiB,2CAAH,sDAWfI,EAAe,mCAAG,WAAM1B,GAAN,0FACNiB,EAAAA,EAAAA,GAAM,UAAD,OAAWjB,GAAW,CAChDmB,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,GAPsB,2CAAH,sDAUfjB,EAAY,mCAAG,WAAMJ,GAAN,0FACHiB,EAAAA,EAAAA,GAAM,UAAD,OAAWjB,EAAX,YAA8B,CACxDmB,OAAQ,CACNC,QAASJ,KAHa,uBAClBK,EADkB,EAClBA,KADkB,kBAOnBA,EAAK3B,MAPc,2CAAH,sDAUZiC,EAAe,mCAAG,WAAM3B,GAAN,0FACNiB,EAAAA,EAAAA,GAAM,UAAD,OAAWjB,EAAX,YAA8B,CACxDmB,OAAQ,CACNC,QAASJ,KAHgB,uBACrBK,EADqB,EACrBA,KADqB,kBAOtBA,EAAKC,SAPiB,2CAAH,qD","sources":["components/Loader/Loader.js","components/MovieCast/MovieCast.styled.jsx","components/MovieCast/MovieCast.js","utils/api.js"],"sourcesContent":["import {MagnifyingGlass} from 'react-loader-spinner';\nexport const Loader = () => {\n  return (\n    <MagnifyingGlass\n      visible={true}\n      height=\"80\"\n      width=\"80\"\n      ariaLabel=\"MagnifyingGlass-loading\"\n      wrapperStyle={{position: 'fixed',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',}}\n      wrapperClass=\"MagnifyingGlass-wrapper\"\n      glassColor = '#c0efff'\n      color = 'orange'\n    />\n  );\n};\n\n","import styled from 'styled-components';\nexport const CastGallery = styled.div`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  gap: 10px;\n  margin: 0 auto;\n  padding: 0;\n  list-style: none;\n`\nexport const CastPoster = styled.img`\n  width: 300px;\n  height: 360px;\n  border-radius: 15px;\n  object-fit: cover;`\n","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from '../../utils/api';\nimport { Loader } from '../Loader/Loader';\nimport noPoster from '../../images/noPoster.jpg'\nimport { CastGallery, CastPoster } from './MovieCast.styled';\nimport toast from 'react-hot-toast';\n\n\n\nexport default function MovieCast() {\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getCast = async () => {\n      setLoading(true);\n      try {\n        const response = await getMovieCast(movieId);\n        setCast(response);\n      } catch (error) {\n        setError(error);\n        return toast.error('Something went wrong..reload the page!');\n      } finally {\n        setLoading(false);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Loader />}\n      {cast.length ? (\n        <CastGallery>\n          {!error && cast.map(({ name, character, profile_path, id }) => (\n            <li key={id}>\n              {profile_path ? (\n              <CastPoster\n                src={`https://image.tmdb.org/t/p/w300${profile_path}`}\n                alt={name}\n                loading=\"lazy\"\n              />) : (<CastPoster src={noPoster} alt={name}/>)}\n              <div>\n                <p>{name}</p>\n                <p>\n                  <b>Character: </b> {character}\n                </p>\n              </div>\n            </li>\n          ))}\n        </CastGallery>\n      ) : (\n        <p>NO CAST </p>\n      )}\n    </div>\n  );\n};\nMovieCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      character: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      profile_path: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import axios from 'axios';\n\nconst KEY = 'c38fbf9ef4d95318ebd4d81243883dff';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  const { data } = await axios.get('/trending/movie/day', {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return data.results;\n};\n\nexport const getSearchMovies = async query => {\n  const { data } = await axios('/search/movie', {\n    params: {\n      api_key: KEY,\n      include_adult: false,\n     query\n    },\n  });\n\n  return data.results;\n};\nexport const getMovieDetails = async movieId => {\n  const { data } = await axios(`/movie/${movieId}`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return data;\n};\n\nexport const getMovieCast = async movieId => {\n  const { data } = await axios(`/movie/${movieId}/credits`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return data.cast;\n};\n\nexport const getMovieReviews = async movieId => {\n  const { data } = await axios(`/movie/${movieId}/reviews`, {\n    params: {\n      api_key: KEY,\n    },\n  });\n\n  return data.results;\n};\n\n\n\n"],"names":["Loader","visible","height","width","ariaLabel","wrapperStyle","position","top","left","transform","wrapperClass","glassColor","color","CastGallery","styled","CastPoster","MovieCast","useState","cast","setCast","loading","setLoading","error","setError","movieId","useParams","useEffect","getCast","getMovieCast","response","toast","length","map","name","character","profile_path","id","src","alt","noPoster","KEY","axios","getTrendingMovies","params","api_key","data","results","getSearchMovies","query","include_adult","getMovieDetails","getMovieReviews"],"sourceRoot":""}